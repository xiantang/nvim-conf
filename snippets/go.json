{
  "for statement": {
    "prefix": "for",
    "body": "for ${1}{\n\t$0\n}",
    "description": "Snippet for a pure for loop"
  },
  "for n statement": {
    "prefix": "fori",
    "body": "for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {\n\t$0\n}",
    "description": "Snippet for a for loop"
  },
  "for range statement": {
    "prefix": "forr",
    "body": "for ${1:_, }${2:v} := range ${3:v} {\n\t$0\n}",
    "description": "Snippet for a for range loop"
  },
  "map declaration": {
    "prefix": "map",
    "body": "map[${1:type}]${2:type}",
    "description": "Snippet for a map"
  },
  "test function": {
    "prefix": "tf",
    "body": "func Test$1(t *testing.T) {\n\t$0\n}",
    "description": "Snippet for Test function"
  },
  "make(...)": {
    "prefix": "make",
    "body": "make(${1:type}, ${2:0})",
    "description": "Snippet for make statement"
  },
  "if statement": {
    "prefix": "if",
    "body": "if ${1:condition} {\n\t$0\n}",
    "description": "Snippet for if statement"
  },
  "else branch": {
    "prefix": "el",
    "body": "else {\n\t$0\n}",
    "description": "Snippet for else branch"
  },
  "log info": {
    "prefix": "logi",
    "body": "logutils.Logger().WithField(\"$1\",$2).Info(\"$3\")",
    "description": "log info"
  },
  "log error": {
    "prefix": "loge",
    "body": "log.Logger().WithError(err).Error(\"$3\")",
    "description": "log error"
  },
  "log context error": {
    "prefix": "logce",
    "body": "logutils.Logger().WithCtx($1).WithError(err).WithField(\"$2\",$3).Error(\"$4\")",
    "description": "log error"
  },
  "log context info": {
    "prefix": "logci",
    "body": "logutils.Logger().WithCtx($1).WithField(\"$2\",$3).Info(\"$4\")",
    "description": "log info"
  },
  "log debug": {
    "prefix": "logcd",
    "body": "logutils.Logger().WithCtx($1).WithField(\"$2\",$3).Debug(\"$4\")",
    "description": "log context debug"
  },
  "Use the statement before the if condition": {
    "prefix": "ife",
    "body": "if err := $1; err != nil {\n\treturn  errors.Wrapf(err, \"$2\", $3)\n}",
    "description": "Use the statement before the if condition"
  },
  "struct": {
    "prefix": "stru",
    "body": "type $1 struct {\n\t$2\n}",
    "description": "struct"
  },
  "interface": {
    "prefix": "inter",
    "body": "type $1 interface {\n\t$2\n}",
    "description": "interface"
  },
  "slice literal": {
    "prefix": "sli",
    "body": "$1 := []$2{$3}",
    "description": "slice literal"
  },
  "gorm tag": {
    "prefix": "gorm",
    "body": "`gorm:\"$1\"`",
    "description": "Snippet for struct gorm tag"
  }
}
